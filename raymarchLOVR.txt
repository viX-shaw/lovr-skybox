local shader = lovr.graphics.newShader([[
vec4 position(mat4 projection, mat4 transform, vec4 vertex) {
  return lovrProjection * lovrTransform * vertex;
}
]],
[[
vec3 light = vec3(-1, -1, 1.5);
vec3 light_color = vec3(1, 1, 1);

vec3 sphere = vec3(0, 0, 2);
float sphere_size = 1.3;
vec3 sphere_color = vec3(1, 1, 1);

uniform float iTime;
uniform vec4 iMouse;
uniform vec3 iResolution;
uniform sampler2D iChannel0;

float raySphere(vec3 rpos, vec3 rdir, vec3 sp, float radius, inout vec3 point, inout vec3 normal) {
    radius = radius * radius;
    float dt = dot(rdir, sp - rpos);
    if (dt < 0.0) {
        return -1.0;
    }
    vec3 tmp = rpos - sp;
    tmp.x = dot(tmp, tmp);
    tmp.x = tmp.x - dt*dt;
    if (tmp.x >= radius) {
        return -1.0;
    }
    dt = dt - sqrt(radius - tmp.x);
    point = rpos + rdir * dt;
    normal = normalize(point - sp);
    return dt;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    light.xy = iMouse.xy / iResolution.xy * 2.0 - 1.0;
    light.y = -light.y;
    vec3 point; 
    vec3 normal;
    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    uv.y = -uv.y;
    vec3 ray = vec3(uv.x, uv.y, 1.0);
    ray = normalize(ray);
    fragColor = vec4(0.0);
    
    float dist = raySphere(vec3(0.0), ray, sphere, sphere_size, point, normal);
    
    if (dist > 0.0) {
        vec3 tmp = normalize(light - sphere);
        float u = atan(normal.z, normal.x) / 3.1415*2.0 + iTime / 5.0;
        float v = asin(normal.y) / 3.1415*2.0 + 0.5;
        fragColor.xyz = vec3(dot(tmp, normal)) * light_color * sphere_color * texture(iChannel0, vec2(u, v)).xyz;
    }
}

vec4 color(vec4 graphicsColor, sampler2D image, vec2 uv)
{
    vec4 color;
    mainImage(color, uv * 1000.0);
    color.a = 1.0;
    return color;
}
]])

lovr.graphics.setShader(shader)
local channel0 = lovr.graphics.newTexture('channel0.png')

function lovr.draw()
  shader:send('iTime', lovr.timer.getTime())
  shader:send('iResolution', {1000, 1000})
  shader:send('iMouse', {20, 20, 0, 0})
  shader:send('iChannel0', channel0)
  lovr.graphics.setShader(shader)
  lovr.graphics.setColor(1,1,1)
  lovr.graphics.plane('fill', 0, 1.7, -0.8, 1, 1)
end



####  EXCITING STUFF ##############

Non convex mesh collision with an isosurface(SDFs)
https://mmacklin.com/sdfcontact.pdf
mainly using gradient descent for 3d meshes
and golden search for 1d meshes